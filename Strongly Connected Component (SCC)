package graph;

import java.util.*;

public class SCC {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt();
        int e = sc.nextInt();
        ArrayList<Integer> adj[] = new ArrayList[v];
        ArrayList<Integer> adjt[] = new ArrayList[v];
        for (int i =0; i<v ; i++)
        {
            adj[i] = new ArrayList<>();
            adjt[i] = new ArrayList<>();

        }
        for (int i =0; i<e ; i++)
        {
            int s = sc.nextInt();
            int d = sc.nextInt();
            adj[s].add(d);
        }
        Stack<Integer> stack = new Stack<>();
        dfs(adj , v , stack);            // step @ 1
        graphTranspose(adj , adjt , v);  // step @ 2
        dfsTranspose(stack , adjt , v);  // step @ 3



    }
    static void dfs(ArrayList<Integer> adj[] , int v ,Stack<Integer> stack)
    {

        boolean visited[] = new boolean[v];
        for (int i = 0; i<v ; i++)
        {
            if(visited[i]==false)
                dfsUtil(i , adj , visited , stack);
        }
    }
    static void dfsUtil(int src , ArrayList<Integer> adj[] , boolean visited[] , Stack<Integer> stack)
    {
        visited[src] = true;
        for(int i =0; i<adj[src].size() ; i++)
        {
            if(!visited[adj[src].get(i)])
                dfsUtil(adj[src].get(i) , adj , visited , stack);

        }
        stack.push(src);
    }
    static void graphTranspose(ArrayList<Integer> adj[] , ArrayList<Integer> adjt[] , int v)
    {
        for(int i =0; i<v; i++)
        {
            for (int j = 0; j<adj[i].size(); j++)
            {
               adjt[adj[i].get(j)].add(i);
            }
        }
    }
    static void dfsTranspose(Stack<Integer> stack ,ArrayList<Integer> adjt[] , int v)
    {
        boolean vis[] = new boolean[v];
        ArrayList<Integer> list = new ArrayList<>();
        while(stack.empty()==false)
        {
            int t = stack.pop();
            if (!vis[t])
            {
                dfsTransposeUtil(t , adjt , vis ,list );
                for (int i = 0; i<list.size(); i++)
                {
                    System.out.print(list.get(i)+" ");
                }
                System.out.println();
            }
            list.clear();

        }
    }
    static void dfsTransposeUtil(int src , ArrayList<Integer> adjt[] , boolean vis[] , ArrayList<Integer> list)
    {
        vis[src] = true;
        for(int i =0; i<adjt[src].size() ; i++)
        {
            if(!vis[adjt[src].get(i)])
                dfsTransposeUtil(adjt[src].get(i) , adjt , vis , list);

        }
        list.add(src);
    }

}
