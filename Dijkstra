package graph;

import java.util.*;

public class Dijkstra {
    static final int v = 9;
    public static void main (String[] args)
    {

        int graph[][] = new int[][]
                {{0, 4, 0, 0, 0, 0, 0, 8, 0},
                {4, 0, 8, 0, 0, 0, 0, 11, 0},
                {0, 8, 0, 7, 0, 4, 0, 0, 2},
                {0, 0, 7, 0, 9, 14, 0, 0, 0},
                {0, 0, 0, 9, 0, 10, 0, 0, 0},
                {0, 0, 4, 14, 10, 0, 2, 0, 0},
                {0, 0, 0, 0, 0, 2, 0, 1, 6},
                {8, 11, 0, 0, 0, 0, 1, 0, 7},
                {0, 0, 2, 0, 0, 0, 6, 7, 0}
        };
        dijkstra(graph , 1);
    }
    static void dijkstra(int graph[][] , int src)
    {
        int dist[] = new int[v];
        boolean spSet[] = new boolean[v];
        for(int i = 0; i<v; i++)
        {
            dist[i] = Integer.MAX_VALUE;
            spSet[i] = false;
        }
        dist[src] = 0;

        for(int count = 0; count < v-1 ;count++)
        {
            int u = minDistance(dist , spSet);
            spSet[u] = true;
            for(int j = 0; j<v ; j++)
            {
                if(!spSet[j] && graph[u][j]!=0 && dist[u] + graph[u][j] < dist[j])
                    dist[j] = dist[u] + graph[u][j];
            }
        }
        System.out.println("vertex distance from source : ");
        for(int i =0; i<v ; i++)
            System.out.println(i + " "+ dist[i]);
    }
    static int minDistance(int dist[] , boolean spSet[])
    {
        int min  = Integer.MAX_VALUE ;
        int min_index = -1;
        for(int i = 0; i<v ; i++)
        {
            if(spSet[i]!=true && dist[i]<=min)
            {
                min = dist[i];
                min_index = i;
            }
        }
        return min_index;
    }

}

