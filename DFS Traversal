import java.io.*;
import java.util.*;

class Graph {
    int v;
    LinkedList<Integer> adj[];

    Graph(int v)
    {
        this.v = v;
        adj = new LinkedList[v];
        for (int i =0; i<v; i++)
            adj[i] = new LinkedList<>();

    }
    void addEdge(int src , int dest)
    {
        adj[src].addFirst(dest);
    }

    void dfs(int s)
    {
        boolean visited[] = new boolean[v];
        dfsUtil(s , visited);
    }

    void dfsUtil(int s , boolean visited[])
    {
        visited[s] = true;
        System.out.print(s + " ");
        Iterator<Integer> itr = adj[s].listIterator();
        while(itr.hasNext())
        {
            int n = itr.next();
            if (!visited[n])// visited[n]==false
                dfsUtil(n , visited);

        }
    }

    public static void main(String args[])
    {
        Graph g = new Graph(5);

        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(1, 3);
        g.addEdge(3, 3);
        g.addEdge(3, 4);

        System.out.println("Following is Depth First Traversal "+
                "(starting from vertex 2)");

        g.dfs(2);
    }
}
